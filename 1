-- 1) Set up ‚Äòlazypath‚Äô where lazy.nvim will live
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"

-- 2) If it‚Äôs not already there, clone the repo
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git", "clone", "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",             -- use latest stable tag
    lazypath,
  })
end

-- 3) Prepend to runtimepath, so Neovim loads it early
vim.opt.rtp:prepend(lazypath)

-- 4) Now you can call require("lazy").setup({ ‚Ä¶ }) later
-- init.lua (Lazy.nvim bootstrap + config)

-- 1) Leader & Basic Options
vim.g.mapleader = ' '
vim.opt.clipboard = 'unnamedplus'
vim.opt.number = true
vim.opt.relativenumber = true

-- 2) Random Theme Selection (before plugin load)
local themes = {
  "catppuccin", "rose-pine", "tokyonight", "nightfox", "kanagawa", "gruvbox-material",
  "everforest", "gruvbox", "dracula", "ayu", "nord", "darkplus", "vscode",
  "material", "github_dark", "calvera", "poimandres", "nightfly", "molokai",
  "tender", "melange", "spaceduck", "onenord", "nordic", "doom-one", "night-owl",
  "palenight", "oxocarbon", "aurora", "mellow", "falcon", "onedark",
  "solarized", "monokai-pro", "fluoromachine", "zephyr", "iceberg", "sonokai",
  "tokyodark", "one", "space", "deus", "sweetie", "citruszest", "juliana",
  "midnight", "bamboo", "edge", "hardhacker", "vs-code", "caret", "cobalt2",
  "rasmus", "vimdark", "zenburn", "moonfly", "one_monokai", "paper",
  "noctishc", "codedark", "boo", "starry", "oxocarbon-lua", "solarized-lua",
  "codeschool", "bluloco", "xcode", "github-dark", "roshni", "min-theme"
}
math.randomseed(os.time())
local theme = themes[math.random(#themes)]

-- 3) Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git", "clone", "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git", lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- 4) Plugin setup using lazy.nvim
require("lazy").setup({
  -- Plugin manager itself
  { 'folke/lazy.nvim', version = '*', lazy = true },

  -- SmoothCursor
  {
    'gen740/SmoothCursor.nvim',
    config = true,
  },

  -- File explorer
  { 'nvim-tree/nvim-tree.lua', dependencies = 'nvim-tree/nvim-web-devicons', config = true },

  -- Git
  'tpope/vim-fugitive',
  {
    'lewis6991/gitsigns.nvim',
    config = true,
  },

  -- Flutter & Dart
  {
    'akinsho/flutter-tools.nvim',
    dependencies = { 'nvim-lua/plenary.nvim', 'stevearc/dressing.nvim' },
    config = true,
  },
  'dart-lang/dart-vim-plugin',

  -- null-ls
  {
    'jose-elias-alvarez/null-ls.nvim',
    dependencies = 'nvim-lua/plenary.nvim',
    config = function()
      local null_ls = require('null-ls')
      null_ls.setup({
        sources = {
          null_ls.builtins.formatting.prettier.with({ extra_args = { "--print-width", "100" } }),
        },
        on_attach = function(client, bufnr)
          if client.supports_method("textDocument/formatting") then
            vim.api.nvim_clear_autocmds({ group = "LspFormatting", buffer = bufnr })
            vim.api.nvim_create_autocmd("BufWritePre", {
              group = vim.api.nvim_create_augroup("LspFormatting", {}),
              buffer = bufnr,
              callback = function() vim.lsp.buf.formatting_sync() end,
            })
          end
        end,
      })
    end,
  },

  -- Copilot + cmp integration
  {
    'zbirenbaum/copilot.lua',
    cmd = 'Copilot',
    event = 'InsertEnter',
    config = function()
      require('copilot').setup({
        suggestion = {
          enabled = true,
          auto_trigger = true,
          debounce = 75,
          keymap = { accept = '<Tab>', next = '<C-]>', prev = '<C-[]>' },
        },
        panel = { enabled = false },
      })
    end,
  },
  {
    'zbirenbaum/copilot-cmp',
    after = { 'copilot.lua', 'nvim-cmp' },
    dependencies = 'hrsh7th/nvim-cmp',
    config = function() require('copilot_cmp').setup({ method = 'getCompletionsCycling' }) end,
  },

  -- Completion + LSP
  'neovim/nvim-lspconfig',
  'hrsh7th/nvim-cmp',
  'hrsh7th/cmp-nvim-lsp',
  'hrsh7th/cmp-buffer',
  'hrsh7th/cmp-path',
  'L3MON4D3/LuaSnip',
  'saadparwaiz1/cmp_luasnip',
  {
    'onsails/lspkind-nvim',
    config = function()
      require('lspkind').init({ symbol_map = { Function = "∆í", Variable = "ùìç" } })
    end,
  },

  -- Themes
  { 'catppuccin/nvim', alias = 'catppuccin' },
  { 'rose-pine/neovim', alias = 'rose-pine' },
  'folke/tokyonight.nvim', 'EdenEast/nightfox.nvim', 'rebelot/kanagawa.nvim',
  'sainnhe/gruvbox-material', 'sainnhe/everforest', 'morhetz/gruvbox',
  { 'dracula/vim', alias = 'dracula' }, 'ayu-theme/ayu-vim', 'shaunsingh/nord.nvim',
  'lunarvim/darkplus.nvim', 'Mofiqul/vscode.nvim', 'marko-cerovac/material.nvim',
  'projekt0n/github-nvim-theme', 'yashguptaz/calvera-dark.nvim', 'olivercederborg/poimandres.nvim',
  'sainnhe/gruvbox.nvim', 'NTBBloodbath/doom-one.nvim', 'oxfist/night-owl.nvim',
  'drewtempelmeyer/palenight.vim', 'Shatur/neovim-ayu', 'nyoom-engineering/oxocarbon.nvim',
  'ray-x/aurora', 'kvrohit/mellow.nvim', 'fenetikm/falcon', 'navarasu/onedark.nvim',
  'loctvl842/monokai-pro.nvim', 'maxmx03/fluoromachine.nvim', 'glepnir/zephyr-nvim',
  'cocopon/iceberg.vim', 'sainnhe/sonokai', 'tiagovla/tokyodark.nvim',
  'Th3Whit3Wolf/one-nvim', 'Th3Whit3Wolf/space-nvim', 'shaunsingh/solarized.nvim',
  'romgrk/doom-one.vim', 'theniceboy/nvim-deus', 'NTBBloodbath/sweetie.nvim',
  'glepnir/oceanic-material', 'zootedb0t/citruszest.nvim', 'mvpopuk/inspired-github.vim',
  'kaiuri/nvim-juliana', 'dasupradyumna/midnight.nvim', 'ribru17/bamboo.nvim',
  'sainnhe/edge', 'hardhackerlabs/theme-vim', 'askfiy/visual_studio_code',
  'projekt0n/caret.nvim', 'lalitmee/cobalt2.nvim', 'kvrohit/rasmus.nvim', 'ldelossa/vimdark',
  'phha/zenburn.nvim', 'bluz71/vim-moonfly-colors', 'cpea2506/one_monokai.nvim',
  'yorickpeterse/vim-paper', 'iagorrr/noctishc.nvim', 'tomasiser/vim-code-dark',
  'rockerBOO/boo-colorscheme-nvim', 'ray-x/starry.nvim', 'sindrets/oxocarbon-lua.nvim',
  'ishan9299/nvim-solarized-lua', 'adisen99/codeschool.nvim', 'uloco/bluloco.nvim',
  'arzg/vim-colors-xcode', 'vv9k/vim-github-dark', 'shaeinst/roshnivim-cs',
  'datsfilipe/min-theme.nvim',

  -- Lualine
  {
    'nvim-lualine/lualine.nvim',
    dependencies = 'nvim-tree/nvim-web-devicons',
    config = function()
      local lualine_themes = {
        ["gruvbox-material"] = "gruvbox", everforest = "everforest", darkplus = "onedark",
        github_dark = "auto", material = "material", vscode = "vscode", ayu = "ayu_dark",
        dracula = "dracula", catppuccin = "catppuccin", tokyonight = "tokyonight",
        nightfox = "nightfox", kanagawa = "kanagawa", onedark = "onedark", nord = "nord",
        ["doom-one"] = "doom-one", poimandres = "poimandres", ["rose-pine"] = "rose-pine",
        spaceduck = "spaceduck", onenord = "onenord", nordic = "nordic",
      }
      require('lualine').setup({
        options = { theme = lualine_themes[theme] or "auto", section_separators = { left='ÓÇ∞', right='ÓÇ≤' }, component_separators={left='ÓÇ±',right='ÓÇ≥'}, icons_enabled=true },
        sections = { lualine_a={'mode'}, lualine_b={'branch','diff','diagnostics'},
                     lualine_c={{'filename', path=1}}, lualine_x={'encoding','fileformat','filetype'},
                     lualine_y={'progress'}, lualine_z={'location'} }, extensions={'fugitive'}
      })
    end,
  },

  -- Telescope & Which-Key
  { 'nvim-telescope/telescope.nvim', version='0.1.8', dependencies='nvim-lua/plenary.nvim' },
  { 'folke/which-key.nvim', config = true },

  -- Floaterm
  {
    'voldikss/vim-floaterm',
    config = function()
      vim.g.floaterm_width = 0.8
      vim.g.floaterm_height = 0.5
      vim.g.floaterm_wintype = 'float'
      vim.g.floaterm_position = 'center'
      vim.g.floaterm_autoclose = 1
      vim.keymap.set('n', '<leader>t', ':FloatermToggle<CR>', { silent=true })
    end,
  },

  -- Code Runner & Auto-save
  { 'CRAG666/code_runner.nvim', dependencies='CRAG666/betterTerm.nvim', config = true },
  { 'Pocco81/auto-save.nvim', config = true },
},
{
  ui = { border = 'rounded' },
})

-- 5) Colorscheme command
if theme == 'github_dark' then
  require('github-theme').setup({ theme_style = 'dark' })
elseif theme == 'ayu' then
  vim.g.ayucolor = 'dark'
else
  vim.cmd('colorscheme ' .. theme)
end

-- 6) Additional setups
-- nvim-web-devicons
require('nvim-web-devicons').setup({ default = true })
-- nvim-tree
require('nvim-tree').setup()
-- Which-Key mappings
require('which-key').register({
  f = { name = 'file', f = {'<cmd>Telescope find_files<CR>','Find File'}, r = {'<cmd>Telescope oldfiles<CR>','Recent File'}, n = {'<cmd>enew<CR>','New File'} },
  b = { name = 'buffer', l={'<cmd>ls<CR>','List Buffers'}, n={'<cmd>bnext<CR>','Next'}, p={'<cmd>bprevious<CR>','Prev'}, d={'<cmd>bdelete<CR>','Delete'} },
  g = { name = 'git', s={'<cmd>Git status<CR>','Status'}, a={'<cmd>Git add .<CR>','Add All'}, c={'<cmd>Git commit<CR>','Commit'}, p={'<cmd>Git push<CR>','Push'}, l={'<cmd>Git pull<CR>','Pull'}, b={'<cmd>Git blame<CR>','Blame'} },
}, { prefix = '<leader>' })

-- LSP
local lspconfig = require('lspconfig')
lspconfig.pyright.setup{}
lspconfig.clangd.setup{}

-- CMP
local cmp = require('cmp')
cmp.setup({
  snippet = { expand = function(args) require('luasnip').lsp_expand(args.body) end },
  mapping = cmp.mapping.preset.insert({ ['<C-Space>']=cmp.mapping.complete(), ['<CR>']=cmp.mapping.confirm({ select=true }) }),
  sources = cmp.config.sources({ { name='copilot' }, { name='nvim_lsp' }, { name='buffer' }, { name='path' }, { name='luasnip' } }),
})

-- Auto-save notification
vim.api.nvim_create_autocmd('BufWritePost',{ pattern='*', callback=function() print('File saved!') end })

-- Keymaps for RunFile and navigation
function RunFile()
  local file = vim.fn.expand('%')
  local ft = vim.bo.filetype
  local cmd
  if ft=='python' then cmd='FloatermNew --autoclose=0 python3 '..file
  elseif ft=='lua' then cmd='FloatermNew --autoclose=1 lua '..file
  elseif ft=='c' then local exe=vim.fn.expand('%:r'); cmd='FloatermNew --autoclose=1 sh -c "gcc '..file..' -o '..exe..' && ./'..exe..'"'
  else print('No runner for '..ft); return end
  vim.cmd(cmd)
  local bufnr=vim.fn.bufnr('%')
  vim.api.nvim_buf_set_keymap(bufnr,'n','<ESC>',':q<CR>',{silent=true})
  vim.api.nvim_buf_set_keymap(bufnr,'n','<C-Space>','<cmd>lua RunFile()<CR>',{silent=true})
end
vim.keymap.set('n','<C-Space>',RunFile,{silent=true})
vim.keymap.set({'n','v'},'<C-h>','b',{silent=true})
vim.keymap.set({'n','v'},'<C-l>','w',{silent=true})
vim.keymap.set('n','<C-n>','<cmd>NvimTreeToggle<CR>',{silent=true})
vim.keymap.set('n','<Tab>','gt',{silent=true})
vim.keymap.set('n','<S-Tab>','gT',{silent=true})






